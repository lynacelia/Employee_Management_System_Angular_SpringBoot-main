// Source code is decompiled from a .class file using FernFlower decompiler.
package com.example.demo.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;

@Entity
@Table(
   name = "employees"
)
public class Employee {
   @Id
   @GeneratedValue(
      strategy = GenerationType.IDENTITY
   )
   private long id;
   @Column(
      name = "first_name"
   )
   private @NotBlank(
   message = "Le pr\u00e9nom est obligatoire"
) @Size(
   min = 2,
   max = 50,
   message = "Le pr\u00e9nom doit avoir entre 2 et 50 caract\u00e8res"
) String firstName;
   @Column(
      name = "last_name"
   )
   private @NotBlank(
   message = "Le nom est obligatoire"
) @Size(
   min = 2,
   max = 50,
   message = "Le nom doit avoir entre 2 et 50 caract\u00e8res"
) String lastName;
   @Column(
      name = "email_id"
   )
   private @NotBlank(
   message = "L'email est obligatoire"
) @Email(
   message = "L'email doit \u00eatre valide"
) String emailId;
   @Column(
      name = "birth_date"
   )
   private @NotBlank(
   message = "La date de naissance est obligatoire"
) String birthDate;
   @Column(
      name = "national_id"
   )
   private @NotBlank(
   message = "L'ID national est obligatoire"
) @Pattern(
   regexp = "\\d{8}",
   message = "L'ID national doit \u00eatre compos\u00e9 de 8 chiffres"
) String nationalId;
   @Column(
      name = "position"
   )
   private @NotBlank(
   message = "Le poste est obligatoire"
) String position;
   @Column(
      name = "company"
   )
   private @NotBlank(
   message = "L'entreprise est obligatoire"
) String company;
   @Column(
      name = "phone_number"
   )
   private @NotBlank(
   message = "Le num\u00e9ro de t\u00e9l\u00e9phone est obligatoire"
) @Pattern(
   regexp = "\\+?[0-9]{10,15}",
   message = "Le num\u00e9ro de t\u00e9l\u00e9phone doit \u00eatre valide"
) String phoneNumber;

   public Employee() {
   }

   public Employee(String firstName, String lastName, String emailId, String birthDate, String nationalId, String position, String company, String phoneNumber) {
      this.firstName = firstName;
      this.lastName = lastName;
      this.emailId = emailId;
      this.birthDate = birthDate;
      this.nationalId = nationalId;
      this.position = position;
      this.company = company;
      this.phoneNumber = phoneNumber;
   }

   public long getId() {
      return this.id;
   }

   public void setId(long id) {
      this.id = id;
   }

   public String getFirstName() {
      return this.firstName;
   }

   public void setFirstName(String firstName) {
      this.firstName = firstName;
   }

   public String getLastName() {
      return this.lastName;
   }

   public void setLastName(String lastName) {
      this.lastName = lastName;
   }

   public String getEmailId() {
      return this.emailId;
   }

   public void setEmailId(String emailId) {
      this.emailId = emailId;
   }

   public String getBirthDate() {
      return this.birthDate;
   }

   public void setBirthDate(String birthDate) {
      this.birthDate = birthDate;
   }

   public String getNationalId() {
      return this.nationalId;
   }

   public void setNationalId(String nationalId) {
      this.nationalId = nationalId;
   }

   public String getPosition() {
      return this.position;
   }

   public void setPosition(String position) {
      this.position = position;
   }

   public String getCompany() {
      return this.company;
   }

   public void setCompany(String company) {
      this.company = company;
   }

   public String getPhoneNumber() {
      return this.phoneNumber;
   }

   public void setPhoneNumber(String phoneNumber) {
      this.phoneNumber = phoneNumber;
   }
}
